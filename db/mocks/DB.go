// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	db "github.com/eugeneverywhere/billing/db"
	mock "github.com/stretchr/testify/mock"

	models "github.com/eugeneverywhere/billing/db/models"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// Begin provides a mock function with given fields:
func (_m *DB) Begin() (db.Transaction, error) {
	ret := _m.Called()

	var r0 db.Transaction
	if rf, ok := ret.Get(0).(func() db.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DB) Close() {
	_m.Called()
}

// Connect provides a mock function with given fields:
func (_m *DB) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: info
func (_m *DB) CreateAccount(info *models.Account) (*models.Account, error) {
	ret := _m.Called(info)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(*models.Account) *models.Account); ok {
		r0 = rf(info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Account) error); ok {
		r1 = rf(info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByExternalID provides a mock function with given fields: externalID
func (_m *DB) GetAccountByExternalID(externalID string) (*models.Account, error) {
	ret := _m.Called(externalID)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(string) *models.Account); ok {
		r0 = rf(externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccounts provides a mock function with given fields:
func (_m *DB) GetAllAccounts() ([]*models.Account, error) {
	ret := _m.Called()

	var r0 []*models.Account
	if rf, ok := ret.Get(0).(func() []*models.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockAccount provides a mock function with given fields: id
func (_m *DB) LockAccount(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockAccount provides a mock function with given fields: id
func (_m *DB) UnlockAccount(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountBalance provides a mock function with given fields: info
func (_m *DB) UpdateAccountBalance(info *models.Account) (*models.Account, error) {
	ret := _m.Called(info)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(*models.Account) *models.Account); ok {
		r0 = rf(info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Account) error); ok {
		r1 = rf(info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
